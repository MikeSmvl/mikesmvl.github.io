name: Receive the data

on:
  workflow_dispatch:
    inputs:
      version:
        description: version of app
        default: 1.10.0
        required: true

  workflow_run:
    workflows: [Upload data]
    types:
      - completed

jobs:
  download:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    outputs:
      version: ${{ steps.export.outputs.version }}
    steps:
      - name: 'Download artifact'
        uses: actions/github-script@v6
        with:
          script: |
            let allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({
               owner: context.repo.owner,
               repo: context.repo.repo,
               run_id: context.payload.workflow_run.id,
            });
            let matchArtifact = allArtifacts.data.artifacts.filter((artifact) => {
              return artifact.name == "version"
            })[0];
            let download = await github.rest.actions.downloadArtifact({
               owner: context.repo.owner,
               repo: context.repo.repo,
               artifact_id: matchArtifact.id,
               archive_format: 'zip',
            });
            let fs = require('fs');
            fs.writeFileSync(`${process.env.GITHUB_WORKSPACE}/version.zip`, Buffer.from(download.data));

      - name: 'Unzip artifact'
        run: unzip version.zip

      - name: 'Export artifact version'
        id: 'export'
        run: |
          version=`cat ./version`
          echo $version
          echo "::set-output name=version::$version"

  get-version:
      runs-on: ubuntu-latest
      needs: [download]
      outputs:
        version: ${{ steps.conditional.outputs.version }}
      if: always() && github.event_name == 'workflow_dispatch' || (github.event.workflow_run.conclusion == 'success' && needs.download.result == 'success')
      steps:
        - name: Find tag using artifact or input
          id: conditional
          run: |
            if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
                echo v${{ github.event.inputs.version }}
                echo "::set-output name=version::v${{ github.event.inputs.version }}"
            fi
            if [[ "${{ needs.download.result }}" == "success" ]]; then
                echo ${{ needs.download.outputs.version }}
                echo "::set-output name=version::${{ needs.download.outputs.version }}"
            fi
  echo:
    runs-on: ubuntu-latest
    needs: [get-version]
    if: always() && needs.get-version.result == 'success'
    steps:
      - run: echo ${{ needs.get-version.outputs.version }}
